version: '3'

services:
# Authentification service : host
  gateway-host:
    container_name: ApiGatewayHost
    build: 
      context: ./gateway
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - auth-host
      - product-host
      - delivery-host
      - rabbitmq
    environment:
      AUTH_API: http://localhost:50001
      PRODUCT_API: http://localhost:50002
      DELIVERY_API: http://localhost:50003
    ports:
      - "80:8080"
      - "443:8080"
    networks:
      - backend

# Authentification service : host
  auth-host:
    container_name: AuthentificationHost
    build: 
      context: ./auth
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - auth-mongodb
      - rabbitmq
    environment:
      DATABASE_NAME: goodfood-auth
      DATABASE_USER: admin
      DATABASE_PASS: admin
      DATABASE_URI: mongodb://mongodbauth:27017
    ports:
      - "50001:8080"
    networks:
      - backend

# Authentification service : db
  auth-mongodb:
    image: mongo:jammy
    container_name: AuthentificationMongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - auth:/data/auth/mongodb
    ports:
      - '27017:27017'
    hostname: mongodbauth
    networks:
      - backend

# Product service : host
  product-host:
    container_name: ProductHost
    build: 
      context: ./product
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - product_postgres_db
      - rabbitmq
    environment:
      - CONNECTION_STRING="Server=tcp:productpostgresadmin,5432;Initial Catalog=Product;Persist Security Info=False;User ID=productpostgresadmin;Password=admin;Connection Timeout=30;"
    ports:
      - "50002:8080"
    networks:
      - backend

# Product service : db
  product_postgres_db:
    image: postgres:latest
    container_name: ProductPostgres
    restart: always
    environment: 
      - POSTGRES_USER=productpostgresadmin
      - POSTGRES_PASSWORD=admin
      - PGDATA=/data/product/postgres
    ports:
      - "5432:5432"
    volumes:
      - product:/data/product/postgres
    hostname: postgresproduct
    networks:
      - backend

# Delivery service : host
  delivery-host:
    container_name: DeliveryHost
    build: 
      context: ./delivery/Sources
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - delivery_postgres_db
      - rabbitmq
    ports:
      - "50003:8080"
    environment:
      - ConnectionStrings__DefaultConnection="Server=tcp:postgresdelivery,5433;Initial Catalog=Delivery;Persist Security Info=False;User ID=deliverypostgresadmin;Password=admin;Connection Timeout=30;"
      - RabbitMQ__Hostname=rabbitmq
      - RabbitMQ__Username=admin
      - RabbitMQ__Password=admin
    networks:
      - backend

# Delivery service : db
  delivery_postgres_db:
    image: postgres:latest
    container_name: DeliveryPostgres
    restart: always
    environment: 
      - POSTGRES_USER=deliverypostgresadmin
      - POSTGRES_PASSWORD=admin
      - PGDATA=/data/delivery/postgres
    ports:
      - "5433:5432"
    volumes:
      - delivery:/data/delivery/postgres
    hostname: postgresdelivery
    networks:
      - backend

# RabbitMQ
  rabbitmq:
    image: rabbitmq:management
    container_name: "RabbitMQ"
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    hostname: "rabbitmq"
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  auth:
    driver: local
  delivery:
    driver: local
  product:
    driver: local